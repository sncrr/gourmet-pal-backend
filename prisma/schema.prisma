// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int            @id @default(autoincrement())
  email      String         @unique
  password   String?
  auth_type  String?
  first_name String?
  last_name  String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @default(now())
  followers  UserFollower[] @relation(name: "UserFollowers")
  followeds  UserFollower[] @relation(name: "FollowedUsers")
  recipes    Recipe[]       @relation(name: "RecipeToUser")
  comments   Comment[]      @relation(name: "CommentToUser")
  savors     Savor[]        @relation(name: "SavorToUser")

  @@map("user")
}

model UserFollower {
  id          Int  @id @default(autoincrement())
  user_id     Int
  followed_id Int
  user        User @relation(name: "UserFollowers", fields: [user_id], references: [id])
  followed    User @relation(name: "FollowedUsers", fields: [followed_id], references: [id])

  @@map("user_follower")
}

model Recipe {
  id          Int                @id @default(autoincrement())
  user_id     Int
  name        String
  description String
  prep_time   Int
  cook_time   Int
  servings    Int
  privacy     String             @default("private")
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @default(now())
  images      RecipeImage[]      @relation(name: "RecipeToRecipeImage")
  ingredients RecipeIngredient[] @relation(name: "RecipeToRecipeIngredient")
  steps       RecipeStep[]       @relation(name: "RecipeToRecipeStep")
  user        User               @relation(name: "RecipeToUser", fields: [user_id], references: [id])
  comments    Comment[]          @relation(name: "CommentToRecipe")
  savors      Savor[]            @relation(name: "RecipeToSavor")

  @@map("recipe")
}

model RecipeImage {
  id        Int    @id @default(autoincrement())
  recipe_id Int
  path      String
  recipe    Recipe @relation(name: "RecipeToRecipeImage", fields: [recipe_id], references: [id])

  @@map("recipe_image")
}

model RecipeIngredient {
  id            Int        @id @default(autoincrement())
  recipe_id     Int
  ingredient_id Int
  unit          String
  qty           String
  recipe        Recipe     @relation(name: "RecipeToRecipeIngredient", fields: [recipe_id], references: [id])
  ingredient    Ingredient @relation(name: "IngredientToRecipeIngredient", fields: [ingredient_id], references: [id])

  @@map("recipe_ingredient")
}

model RecipeStep {
  id          Int    @id @default(autoincrement())
  recipe_id   Int
  step_number Int
  instruction String
  recipe      Recipe @relation(name: "RecipeToRecipeStep", fields: [recipe_id], references: [id])

  @@map("recipe_step")
}

model Ingredient {
  id                Int                @id @default(autoincrement())
  recipeIngredients RecipeIngredient[] @relation(name: "IngredientToRecipeIngredient")
  name              String
  image             String?

  @@map("ingredient")
}

model Comment {
  id        Int      @id @default(autoincrement())
  user_id   Int
  recipe_id Int
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(name: "CommentToUser", fields: [user_id], references: [id])
  recipe    Recipe   @relation(name: "CommentToRecipe", fields: [recipe_id], references: [id])

  @@map("comment")
}

model Savor {
  id        Int      @id @default(autoincrement())
  user_id   Int
  recipe_id Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(name: "SavorToUser", fields: [user_id], references: [id])
  recipe    Recipe   @relation(name: "RecipeToSavor", fields: [recipe_id], references: [id])

  @@map("savor")
}
